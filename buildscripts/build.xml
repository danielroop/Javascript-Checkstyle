<?xml version="1.0" encoding="iso-8859-1"?>

<!--
	Copyright (c) 2004-2006 The Dojo Foundation, Licensed under the Academic
	Free License version 2.1 or BSD licenses
-->
<project name="dojo" default="help" basedir=".">
	<description>Build the Dojo toolkit</description>

	<!-- project properties -->
	<!-- FIXME: use location instead of value where appropriate? -->
	<property name="project" value="dojo"/>
	<property name="root" value=".."/>
	<property name="src" value="src"/>
	<property name="version" value="0.0.0.dev"/>
	<property name="lang" value="en"/>
	<property name="releaseName" value="${project}"/>
	<property name="dojoLoader" value="default"/>
	<property name="release_dir" location="${root}/release/${releaseName}"/>
	<property name="profile" value=""/>
	<property name="locales" value="en-gb,en-us,de-de,es-es,fr-fr,it-it,pt-br,ko-kr,zh-tw,zh-cn,ja-jp"/> 	<!-- FIXME: where should this list come from? -->
	<property name="currencies" value="GBP,USD,CAD,AUD,EUR,CHF,HKD,JPY"/> 	<!-- FIXME: arbitrary list. Can be altered or eliminated for all currencies -->
	<property name="cldrIn" location="${root}/cldr"/>
	<property name="cldrOut" location="${root}/${src}/i18n/cldr"/>

	<loadfile property="copyright" srcFile="./copyright.txt"/>
	<loadfile property="build_notice" srcFile="./build_notice.txt"/>

	<!-- help task -->
	<target name="help">
		<echo>
See http://dojotoolkit.org/node/19 for more information.
		</echo>
	</target>
	<!-- end help task -->

	<!-- test-scripting task -->
	<target name="testScripting"
		depends="-fix-config"
		description="runs minimal test on our BSF+JS integration">
		<script language="javascript">
			<![CDATA[
			function print(){
				var args = [];
				for(var x=0; x<arguments.length; x++){
					args.push(arguments[x]);
				}
				java.lang.System.out.println.apply(java.lang.System.out, args);
			}

			function echo(msg, parentTask){
				var echo = dojo.createTask("echo");
				parentTask.addTask(echo);
				echo.setMessage(msg);
			}

			print("foo");
			echo("JavaScript (Rhino) integration is working!", testScripting);
		]]>
		</script>
	</target>
	<!-- end testScripting task -->

	<!-- -check-config task -->
	<target name="-check-config"
		description="checks to make sure than we're sane before doing anything else">
		<available property="bsf_ok" file="${user.home}/.ant/lib/bsf.jar" />
		<available property="ant_bsf_ok" file="${user.home}/.ant/lib/ant-apache-bsf.jar" />

		<condition property="config_ok">
			<and>
				<isset property="bsf_ok" />
				<isset property="ant_bsf_ok" />
			</and>
		</condition>

	</target>
	<!-- end -check-config task -->

	<!-- -fix-config task -->
	<target name="-fix-config"
		depends="-check-config"
		unless="config_ok"
		description="fixes our ant classpath (if possible)">
		<copy todir="${user.home}/.ant/lib"
			preservelastmodified="true">
			<fileset dir="lib/">
				<include name="bsf.jar"/>
				<include name="js.jar"/>
				<include name="ant-apache-bsf.jar"/>
			</fileset>
		</copy>

		<echo message=""/>
		<echo message="+--------------------------------------------------------+" />
		<echo message="| Due to some horrendous design decisions by the authors |" />
		<echo message="| of Ant, it has been necessary to install some jar     |" />
		<echo message="| files to your ~/.ant/ directory. Given the nature of   |" />
		<echo message="| the problem, it will be necessary for you to re-run   |" />
		<echo message="| your build command.                                    |" />
		<echo message="|                                                        |" />
		<echo message="| The Dojo team apologies for this inconvenience.        |" />
		<echo message="|                                                        |" />
		<echo message="| The system will now exit.                              |" />
		<echo message="+--------------------------------------------------------+" />
		<echo message=""/>

		<fail message="Sorry, please re-run your build command, it should work now"/>
	</target>
	<!-- end -fix-config task -->

	<!-- api task -->
	<target name="api"
		description="Builds a release (optimized) api reference application">
		<antcall>
			<param name="profileFile" location="${root}/api/api.profile.js" />
			<target name="clean" />
			<target name="release" />
			<target name="intern-strings" />
		</antcall>
		<copy todir="${release_dir}/api" includeEmptyDirs="false" preservelastmodified="true">
			<fileset dir="${root}/api" />
		</copy>
		<copy todir="${release_dir}/docscripts/output/local/json" includeEmptyDirs="false" preservelastmodified="true">
			<fileset dir="${root}/docscripts/output/local/json" />
		</copy>
	</target>
	<!-- end api task -->

	<!-- docparser task -->
	<target name="docparser"
		description="Runs the doc parser against the source tree to generate JSON">
		<exec dir="${root}/docscripts" executable="php5" failonerror="true">
			<arg value="-d" />
			<arg value="memory_limit=100M" />
			<arg value="-d" />
			<arg value="error_reporting=2039" />
			<arg file="docparser.php" />
		</exec>
	</target>
	<!-- end docparser task -->

	<!-- ldml task -->
	<target name="ldml" depends="-ldml-check" unless="ldmlUnpacked"
		description="Unpack CLDR repository">
		<mkdir dir="${cldrIn}/ldml" />
		<unzip src="${cldrIn}/core.zip" dest="${cldrIn}/ldml" />
	</target>
	<target name="-ldml-check">
			<available property="ldmlUnpacked" file="${cldrIn}/ldml" type="dir" />
	</target>
	<!-- end ldml task -->

	<!-- cldr task -->
	<target name="cldr" depends="-fix-config, ldml"
		description="Transforms CLDR (localization data) into JSON">

		<scriptdef name="removeEmptyOutput" language="javascript">
			<attribute name="dir"/>
			<![CDATA[
		function isEmpty(o){
			for(x in o){
				return false;
			}
			return true;
		}
		
		var delTask = project.createTask("delete");
		function deleteResource(f){
			f.isDirectory() ? delTask.setDir(f) : delTask.setFile(f);
			delTask.perform();
		}

	var fs = project.createDataType("fileset");
	var dir = new java.io.File(attributes.get("dir"));
	fs.setDir(dir);
	fs.setIncludes("*.js");
	ds = fs.getDirectoryScanner(project);
	jsFiles = ds.getIncludedFiles();

	var load = project.createTask("loadfile");
	load.setEncoding("UTF8");
	for (var i=0; i<jsFiles.length; i++) {
		var srcFile = java.io.File(dir, jsFiles[i]);
		load.setSrcFile(srcFile);
		//FIXME: spawn task as separate ant process to avoid stale properties, collisions?
		var uniqueId = "removeEmptyOutput.json."+dir+"."+i;
		load.setProperty(uniqueId);
		load.perform();
	
		var contents = String(project.getProperty(uniqueId));
		if(contents.charCodeAt(0) == 0xfeff){ contents = contents.substring(1); } // JDK bug workaround

		try{
			var value = eval(contents);
		}catch(e){
			java.lang.System.out.print("Syntax error in "+srcFile.getCanonicalPath());
			throw e;
		}
		if(isEmpty(value)){
			deleteResource(srcFile);
		}
	}

	// delete the directory if empty
	ds.scan();
	if(!ds.getIncludedFilesCount()){
		deleteResource(dir);
	}
			]]>
		</scriptdef>

		<macrodef name="processLdml">
			<attribute name="in"/>
			<attribute name="destdir"/>

			<sequential>
				<mkdir dir="@{destdir}"/>
				<saxon in="@{in}" style="${cldrIn}/ldml/main/cldrCalendar.xsl" destdir="@{destdir}"/>
				<saxon in="@{in}" style="${cldrIn}/ldml/main/cldrNumber.xsl" destdir="@{destdir}"/>
				<saxon in="@{in}" style="${cldrIn}/ldml/main/cldrCurrency.xsl" destdir="@{destdir}"/>
				<echo level="info" message="Transformed @{in} to @{destDir}" taskName="cldr"/>
				<removeEmptyOutput dir="@{destdir}" />
			</sequential>
		</macrodef>
		<macrodef name="saxon">
			<!-- XSLT ant tasks run for a while, then hang. Perhaps there's a file handle leak?
				 Kludge: Run as separate JVM processes instead to be safe. -->
			<attribute name="in"/>
			<attribute name="style"/>
			<attribute name="destdir"/>

			<sequential>
				<java fork="true" dir="@{destdir}" jar="lib/saxon8.jar">
					<!-- Reference the DTD locally to speed things up -->
					<!-- resolver and CatalogManager.properties have to be on the bootclasspath, apparently
						 in order for JAXP to find them -->
					<jvmarg value="-Xbootclasspath/a:${cldrIn}/../buildscripts/lib/resolver.jar"/>
					<jvmarg value="-Xbootclasspath/a:${cldrIn}"/>
					<arg value="-r"/>
					<arg value="org.apache.xml.resolver.tools.CatalogResolver"/>
					<arg value="-x"/>
					<arg value="org.apache.xml.resolver.tools.ResolvingXMLReader"/>
					<arg value="-y"/>
					<arg value="org.apache.xml.resolver.tools.ResolvingXMLReader"/>
					<arg file="@{in}"/>
					<arg file="@{style}"/>
					<arg value="currencyList=${currencies}"/>
				</java>
			</sequential>
		</macrodef>

		<scriptdef name="transformCldr" language="javascript">
			<attribute name="destdir"/>
			<element name="fileset" type="fileset"/>
			<![CDATA[
	var fs = elements.get("fileset").get(0);
	ds = fs.getDirectoryScanner(project);
	srcFiles = ds.getIncludedFiles();
	var basedir = fs.getDir(project);
	var destDir = attributes.get("destdir");

	for (i=0; i<srcFiles.length; i++) {
		var filename = srcFiles[i];
		var locale = filename.substring(0, filename.indexOf(".")).replace("_","-").toLowerCase();
		var outDir = new java.io.File(locale == "root" ? destDir : destDir+"/"+locale);

		var ldml = project.createTask("processLdml");
		ldml.setDynamicAttribute("in", new java.io.File(basedir+"/"+filename));
		ldml.setDynamicAttribute("destdir", outDir);
		ldml.perform();
	}
			]]>
		</scriptdef>

		<!-- kludge to fix the "Fail to load **.xml" exception which occurs in IBM JDK 1.4.2
			where saxon uses wrong base with relative URIs -->
		<copy todir="${cldrIn}/ldml/main">
		   <fileset dir=".">
		     <include name="**/cldr*.xsl"/>
		   </fileset>
		</copy>	

		<delete dir="${cldrOut}/nls" />
		<transformCldr destdir="${cldrOut}/nls">
			<fileset dir="${cldrIn}/ldml/main" includes="**/*.xml" />
		</transformCldr>
		<java jar="lib/js.jar" failonerror="true" fork="true" logError="true" >
			<arg value="cldrArrayInherit.js" />
			<arg value="${cldrOut}/nls" />
			<sysproperty key="DOJO_LOADER" value="${dojoLoader}" />
		</java>
	</target>
	<!-- end cldr task -->

	<!-- strip-resource-comments -->
		<target name="strip-resource-comments">
		<java jar="./lib/custom_rhino.jar" failonerror="true" fork="true" 
				logerror="true">
			<arg value="stripComments.js" />
			<arg value="${release_dir}"/>
		</java>
	</target>
	<!-- end strip-resource-comments -->

	<!-- -set-profileFile task -->
	<target name="-set-profileFile" depends="-fix-config"
		description="Configures profileFile property.">
		<!-- Set up the profileFile property. -->
		<script language="javascript">
			<![CDATA[
			var pf = dojo.getProperty("profileFile");
			if((!pf)||(pf=="null")||(pf=="")){
				var prof = dojo.getProperty("profile");
				if((prof)&&(prof!="null")&&(prof!="")){
					dojo.setNewProperty("profileFile", "profiles/"+prof+".profile.js");
				}else{
					dojo.setNewProperty("profileFile", "getDependencyList.js");
				}
			}
		]]>
		</script>
	</target>
	<!-- end -set-profileFile task -->

	<!-- list-profile-deps task -->
	<target name="list-profile-deps" depends="-fix-config, -set-profileFile"
		description="Lists the files that will be included in dojo.js for a given profile">
		<!-- Call the JS script that will generate the file list. -->
		<java jar="./lib/custom_rhino.jar" failonerror="true" fork="true"
			logError="true">
			<arg value="listProfileDeps.js" />
			<arg value="${profileFile}" />
			<arg value="${version}" />
			<sysproperty key="DOJO_LOADER" value="${dojoLoader}" />
		</java>
	</target>
	<!-- end list-profile-deps task -->

	<target name="-flatten-resources" depends="-set-profileFile"
		description="loads all localization bundles in the build for a particular locale, flattens the object, and outputs a preloaded version">
		<!-- FIXME: should also remove dojo.requireLocalization() calls from the build? -->
		<copy overwrite="true" file="${srcFile}" tofile="${release_dir}/localizations.tmp.js">
			<filterchain>
				<tokenfilter>
					<containsregex pattern="dojo\.requireLocalization\(.*\);"/>
				</tokenfilter>
			</filterchain>
		</copy>

		<java jar="./lib/custom_rhino.jar" failonerror="true" fork="true"
			logError="true" outputproperty="generatedLocales" >
			<!--java jar="./lib/custom_rhino.jar" failonerror="true" fork="true"
			logError="true" -->
			<arg value="flattenResources.js" />
			<arg value="${release_dir}" />
			<arg value="${profileFile}" />
			<arg value="${release_dir}/localizations.tmp.js" />
			<arg value="${release_dir}/nls" />
			<arg value="${buildPrefix}" />
			<arg value="${locales}" />
			<sysproperty key="DOJO_LOADER" value="${dojoLoader}" />
		</java>

		<delete file="${release_dir}/localizations.tmp.js" />
		<available property="hasResources" file="${release_dir}/nls" type="dir" />
		<echo level="info" message="Generated flattened resources for prefix ${buildPrefix} in the following locales: ${generatedLocales}" taskName="-flatten-resources"/>
	</target>

	<target name="-preload-resources" depends="-flatten-resources" if="hasResources"
		description="inserts data necessary for the bootstrap to preload the flattened resource files">
		<replaceregexp match="/\*\*\*BUILD:localesGenerated\*\*\*/" byline="false" replace="=${generatedLocales}"
			file="${dstFile}"/>
	</target>

	<!-- intern-strings task -->
	<target name="intern-strings" depends="-fix-config, -set-profileFile"
		description="pulls template paths specified in prototypes into templateStrings which can be used to speed up widget construction">

		<java jar="./lib/custom_rhino.jar" failonerror="true" fork="true"
			logError="true">
			<arg value="internStrings.js" />
			<arg value="${profileFile}" />
			<arg value="${dojoLoader}" />
			<arg value="${release_dir}" />
		</java>
	</target>
	<!-- end intern-strings task -->

	<!-- xd-dojo-config task -->
	<target name="xd-dojo-config" depends="-fix-config"
		description="Sets dojo.js to use xdomain loading and sets dojo module path to a specific URL.">
		<java jar="./lib/custom_rhino.jar" failonerror="true" fork="true"
			logError="true">
			<arg value="setXdDojoConfig.js" />
			<arg value="${release_dir}/dojo.js" />
			<arg value="${xdDojoUrl}" />
		</java>
		<java jar="./lib/custom_rhino.jar" failonerror="true" fork="true"
			logError="true">
			<arg value="setXdDojoConfig.js" />
			<arg value="${release_dir}/dojo.js.uncompressed.js" />
			<arg value="${xdDojoUrl}" />
		</java>
	</target>
	<!-- end xd-dojo-config task -->

	<!-- xdgenRelease task -->
	<target name="xdgenRelease" if="xdgenRun" depends="xdgenRemove, -set-profileFile">
		<echo level="info" message="Generating xd resource files..." taskName="xdgenRelease"/>
		<java jar="./lib/custom_rhino.jar" failonerror="true" fork="true" logError="true">
			<arg value="xdgen.js" />
			<arg value="xdgen" />
			<arg value="${profileFile}" />
			<arg value="${release_dir}" />
			<arg value="${release_dir}/src" />
			<arg value="${release_dir}/nls" />
		</java>
		<echo level="info" message="Finished generating xd resource files." taskName="xdgenRelease"/>
	</target>
	<!-- end xdgenRelease task -->

	<!-- xdgenRemove task -->
	<target name="xdgenRemove" depends="-set-profileFile"
			description="Removes package files that were created by xdgen.">
		<!-- Remove .xd.js files -->
		<echo level="info" message="Removing xd resource files..." taskName="xdgenRemove"/>
		<java jar="./lib/custom_rhino.jar" failonerror="true" fork="true" logError="true">
			<arg value="xdgen.js" />
			<arg value="xdremove" />
			<arg value="${profileFile}" />
			<arg value="${release_dir}" />
			<arg value="${release_dir}/src" />
			<arg value="${release_dir}/nls" />
		</java>
		<echo level="info" message="Finished removing xd resource files." taskName="xdgenRemove"/>
	</target>
	<!-- end xdgenRemove task -->
	<target name="dummy_javac" description="Make eclipse happy to create a project from this build.xml">
		<javac srcdir="./" failonerror="true" destdir="./" debug="true">
		</javac>
	</target>
</project>
